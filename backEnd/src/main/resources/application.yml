server:
  port: 8080
  servlet:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
  # ALB(Application Load Balancer) 환경을 위한 설정
  tomcat:
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto
      protocol-header-https-value: https
    # WebSocket을 위한 추가 설정
    max-http-header-size: 8192
    connection-timeout: 20000
    # WebSocket 연결 최적화 설정
    max-connections: 8192
    accept-count: 100
    threads:
      max: 200
      min-spare: 10
  # HTTP → HTTPS 리다이렉트 설정 (선택사항)
  forward-headers-strategy: native

spring:
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:}

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  jackson:
    serialization:
      fail-on-empty-beans: false

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/auctionService?useSSL=false&allowPublicKeyRetrieval=true}
    username: ${SPRING_DATASOURCE_USERNAME:root}
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: false # 커넥션 반환 시 자동 커밋 비활성화
      maximum-pool-size: 20 # 커넥션 풀의 최대 커넥션 수
      minimum-idle: 5 # 풀에서 유지할 최소 유휴 커넥션 수
      connection-timeout: 30000 # 커넥션 획득 최대 대기 시간(ms)
      idle-timeout: 600000 # 유휴 커넥션 최대 유지 시간(ms)
      max-lifetime: 1800000 # 커넥션의 최대 생존 시간(ms)
      leak-detection-threshold: 60000 # 커넥션 누수 감지 임계값(ms)
      pool-name: "AuctionHikariCP" # 커넥션 풀 이름

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: update
    show-sql: false
    database-platform: org.hibernate.dialect.MySQL8Dialect



  mail:
    host: smtp.gmail.com
    port: 587
    username: your-email@gmail.com
    password: your-app-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
      auth-code-expiration-millis: 180000  # 30 * 60 * 1000 == 3분

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always # 최초 실행 시만
    properties:
      org:
        quartz:
          scheduler:
            instanceName: AuctionScheduler
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{36}) - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  level:
    root: INFO
    # Hibernate SQL 로깅
    org.hibernate.SQL: DEBUG
    org.hibernate.orm.jdbc.bind: TRACE
    org.hibernate.orm.jdbc.extract: TRACE
    org.springframework.transaction.interceptor: TRACE
    
    # 프로젝트 로깅 설정 (개발 시 디버깅용)
    org.example.bidflow: DEBUG
    org.example.bidflow.global.exception: INFO
    org.example.bidflow.domain.user.service: INFO
    org.example.bidflow.domain.bid.service: INFO
    org.example.bidflow.domain.auction.service: DEBUG
    org.example.bidflow.global.app: INFO
    
    # Spring Security 디버깅
    org.springframework.security: DEBUG
    org.springframework.web.filter: DEBUG
    
    # Redis 관련 로깅
    org.springframework.data.redis: DEBUG
    
    # 웹소켓 로깅
    org.springframework.web.socket: DEBUG
    
    # 외부 라이브러리 로깅 최소화
    com.zaxxer.hikari: WARN
    org.apache.http: WARN
    org.springframework.web.servlet.PageNotFound: WARN
  
  # 로그 파일 설정 (운영 환경에서 유용)
  file:
    name: logs/bidflow-application.log
    max-size: 100MB
    max-history: 30
    total-size-cap: 1GB

springdoc:
  default-produces-media-type: application/json;charset=UTF-8

# Health check configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # 노출할 actuator 엔드포인트 목록
      base-path: /actuator # actuator 엔드포인트의 기본 경로

  endpoint:
    health:
      show-details: when-authorized # 인증된 사용자에게만 health 상세 정보 제공
    metrics:
      access: unrestricted
    prometheus:
      enabled: true # prometheus 엔드포인트 활성화

  metrics:
    tags:
      application: ${spring.application.name} # 메트릭에 애플리케이션 이름 태그 추가
      environment: ${spring.profiles.active:default} # 메트릭에 환경 태그 추가

    enable:
      hikaricp: true # HikariCP 커넥션 풀 메트릭 활성화

    distribution:
      percentiles-histogram:
        hikaricp.connections: true # HikariCP 커넥션 수에 대한 히스토그램 활성화
      percentiles:
        hikaricp.connections: 0.5, 0.95, 0.99 # HikariCP 커넥션 수에 대한 퍼센타일(50%, 95%, 99%) 수집

origin:
  ip:
    frontend:
      - http://localhost:3000
      - http://13.125.44.217:3000
      - http://13.125.44.217:*
      - http://43.201.193.75:8080
      - http://43.201.193.75:*
      - https://auctionservice.site
      - https://www.auctionservice.site
      - https://*.vercel.app
      - https://auction-service-fe.vercel.app
      - https://localhost:3000
      - https://Load-Balancer-114836647.ap-southeast-2.elb.amazonaws.com
      - http://Load-Balancer-114836647.ap-southeast-2.elb.amazonaws.com
      - wss://Load-Balancer-114836647.ap-southeast-2.elb.amazonaws.com
      - ws://Load-Balancer-114836647.ap-southeast-2.elb.amazonaws.com
      - https://bidflow.cloud
      - wss://bidflow.cloud

# 쿠키 기반 인증 설정 (로컬 환경 기준)
cookie:
  secure: false     # 로컬 HTTP 환경
  same-site: Lax    # 로컬 환경에서 적절한 설정
  domain:           # 도메인 설정 없음

# Rate Limiting 설정 (3단계 Burst Protection)
rate-limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}  # 환경변수로 제어 가능
  
  # 기본 IP 기반 제한 (Burst Attack 방지)
  default-ip-limit:
    requests-per-second: ${RATE_LIMIT_IP_PER_SECOND:10}      # 초당 10회 (Burst 차단)
    requests-per-minute: ${RATE_LIMIT_IP_PER_MINUTE:100}     # 분당 100회
    requests-per-hour: ${RATE_LIMIT_IP_PER_HOUR:1000}        # 시간당 1000회
  
  # 인증된 사용자 제한 (더 관대한 제한)
  user-limit:
    authenticated-user-requests-per-second: ${RATE_LIMIT_USER_PER_SECOND:20}    # 초당 20회
    authenticated-user-requests-per-minute: ${RATE_LIMIT_USER_PER_MINUTE:500}   # 분당 500회
    authenticated-user-requests-per-hour: ${RATE_LIMIT_USER_PER_HOUR:5000}      # 시간당 5000회
  
  # Burst 방지 고급 설정
  burst-protection:
    enabled: ${BURST_PROTECTION_ENABLED:true}              # Burst 방지 활성화
    strict-mode: ${BURST_STRICT_MODE:false}                # 엄격 모드 (더 낮은 임계값)
    detection-window-seconds: ${BURST_DETECTION_WINDOW:5}  # Burst 감지 윈도우 (5초)
  
  # API별 개별 제한 (코드에서 정의된 3단계 제한 사용)
  # 인증 API: 1-2회/초, 일반 API: 5-30회/초