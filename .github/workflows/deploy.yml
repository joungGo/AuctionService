name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  APPLICATION_YML: ${{ secrets.APPLICATION_YML }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: List files for debugging
      run: |
        pwd
        ls -la
        echo "--- Checking if backEnd directory exists ---"
        ls -la backEnd/ || echo "backEnd directory not found"
        
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Grant execute permission for gradlew
      run: |
        cd backEnd
        chmod +x ./gradlew
      
    - name: Build with Gradle
      run: |
        cd backEnd
        ./gradlew build
      
    - name: Build Docker image
      run: |
        cd backEnd
        docker build -t bidflow-app .
      
    - name: Save Docker image
      run: |
        cd backEnd
        docker save bidflow-app > bidflow-app.tar
        gzip bidflow-app.tar
        echo "Files to be transferred:"
        ls -la docker-compose.yml bidflow-app.tar.gz
        
    - name: Test SSH connection
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "SSH connection successful!"
          whoami
          pwd
          echo "Home directory: $HOME"
          ls -la $HOME
          mkdir -p $HOME/bidflow
          ls -la $HOME/bidflow/
        
    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "backEnd/docker-compose.yml,backEnd/bidflow-app.tar.gz"
        target: "~/bidflow"
        debug: true
        overwrite: true
        
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.5
      env:
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: MYSQL_PASSWORD,REDIS_PASSWORD
        script: |
          cd $HOME/bidflow
          
          # Move files from backEnd subdirectory to current directory
          mv backEnd/docker-compose.yml . || echo "docker-compose.yml already exists"
          mv backEnd/bidflow-app.tar.gz . || echo "bidflow-app.tar.gz already exists"
          
          # Load Docker image
          docker load < bidflow-app.tar.gz
          
          # Set environment variables for Docker Compose (now passed via envs)
          # MYSQL_PASSWORD and REDIS_PASSWORD are already available from GitHub Actions
          
          echo "Environment variables set:"
          echo "MYSQL_PASSWORD: $([ -n "$MYSQL_PASSWORD" ] && echo "SET" || echo "NOT SET")"
          echo "REDIS_PASSWORD: $([ -n "$REDIS_PASSWORD" ] && echo "SET" || echo "NOT SET")"
          
          # Try Docker Compose V2 first, then V1, then install
          if command -v docker &> /dev/null && docker compose version &> /dev/null; then
            echo "Using Docker Compose V2"
            COMPOSE_CMD="docker compose"
          elif command -v docker-compose &> /dev/null; then
            echo "Using Docker Compose V1"
            COMPOSE_CMD="docker-compose"
          else
            echo "Installing Docker Compose V1..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            COMPOSE_CMD="docker-compose"
          fi
          
          # Clean up old containers and networks
          echo "=== Cleaning up existing containers ==="
          $COMPOSE_CMD down -v --remove-orphans || echo "No containers to stop"
          
          # Force remove any conflicting containers
          docker rm -f mysql-server redis-server bidflow 2>/dev/null || echo "No conflicting containers to remove"
          
          docker system prune -f || echo "No cleanup needed"
          
          # Start MySQL and Redis first
          echo "=== Starting MySQL and Redis first ==="
          $COMPOSE_CMD up -d mysql redis
          
          # Wait for MySQL to be ready
          echo "=== Waiting for MySQL to be ready ==="
          for i in {1..20}; do
            if docker exec mysql-server mysqladmin ping -h localhost -u root -p"$MYSQL_PASSWORD" --silent 2>/dev/null; then
              echo "✅ MySQL is ready! (attempt $i)"
              break
            else
              echo "⏳ Waiting for MySQL... ($i/20)"
              if [ $i -eq 20 ]; then
                echo "❌ MySQL failed to start within 200 seconds"
                echo "=== MySQL Logs ==="
                $COMPOSE_CMD logs mysql
              fi
              sleep 10
            fi
          done
          
          # Wait for Redis to be ready
          echo "=== Waiting for Redis to be ready ==="
          for i in {1..10}; do
            if docker exec redis-server redis-cli -a "$REDIS_PASSWORD" ping 2>/dev/null | grep -q PONG; then
              echo "✅ Redis is ready! (attempt $i)"
              break
            else
              echo "⏳ Waiting for Redis... ($i/10)"
              if [ $i -eq 10 ]; then
                echo "❌ Redis failed to start within 50 seconds"
                echo "=== Redis Logs ==="
                $COMPOSE_CMD logs redis
              fi
              sleep 5
            fi
          done
          
          # Now start the Spring Boot application
          echo "=== Starting Spring Boot Application ==="
          $COMPOSE_CMD up -d app
          
          # Clean up
          rm -f bidflow-app.tar.gz
          
          # Wait for application startup
          echo "=== Waiting for application startup ==="
          sleep 30
          
          # Check final status
          echo "=== Final Container Status ==="
          $COMPOSE_CMD ps
          
          # Test network connectivity
          echo "=== Testing Network Connectivity ==="
          echo "Testing MySQL connection from app container:"
          docker exec bidflow nc -zv mysql 3306 || echo "❌ Cannot connect to MySQL"
          echo "Testing Redis connection from app container:"
          docker exec bidflow nc -zv redis 6379 || echo "❌ Cannot connect to Redis"
          
          # Show network details
          echo "=== Network Information ==="
          docker network ls
          echo "=== bidflow-network details ==="
          docker network inspect bidflow-network 2>/dev/null || echo "Network not found"
          
          # Show final logs
          echo "=== Final Application Logs ==="
          $COMPOSE_CMD logs --tail=50 app
          
          echo "=== MySQL Status ==="
          docker exec mysql-server mysqladmin -u root -p"$MYSQL_PASSWORD" status 2>/dev/null || echo "MySQL status check failed"
          
          echo "=== Redis Status ==="
          docker exec redis-server redis-cli -a "$REDIS_PASSWORD" info server 2>/dev/null | head -10 || echo "Redis status check failed" 
