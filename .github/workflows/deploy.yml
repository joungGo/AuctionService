name: Backend Deploy To AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [ opened, synchronize, reopened, closed ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          java-package: 'jdk'
          check-latest: false
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Make gradlew executable
        run: chmod +x backEnd/gradlew

      - name: Build with Gradle
        working-directory: backEnd
        run: ./gradlew clean build

      - name: Login to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build Docker image
        working-directory: backEnd
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/bidflow:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/bidflow:latest

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 30s
          debug: true
          script: |
            echo "SSH connection successful!"
            whoami
            pwd
            docker --version || echo "Docker not found"
            # 시스템 정보 확인
            cat /etc/os-release
            uname -a

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 300s
          script: |
            # Docker가 설치되어 있는지 확인
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed. Installing Docker..."
              # Ubuntu용 Docker 설치
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -a -G docker ubuntu
              echo "Docker installed successfully"
            fi
            
            # Docker 서비스 상태 확인
            sudo systemctl status docker --no-pager || true
            
            # application.yml 파일 생성 (Ubuntu용 경로)
            echo '${{ secrets.APPLICATION_YML }}' > /home/ubuntu/application.yml
            
            # application-secret.yml 파일 생성 (Ubuntu용 경로)
            echo '${{ secrets.APPLICATION_SECRET_YML }}' > /home/ubuntu/application-secret.yml
            
            # Docker 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
            
            # 기존 컨테이너 정리
            sudo docker stop bidflow || true
            sudo docker rm bidflow || true
            
            # 이전 이미지 정리 (선택사항)
            sudo docker image prune -f || true
            
            # Docker 컨테이너 실행 (Ubuntu용 경로)
            sudo docker run -d \
              -p 8080:8080 \
              --name bidflow \
              --restart unless-stopped \
              -v /home/ubuntu:/app/config \
              -e SPRING_CONFIG_LOCATION="file:/app/config/application.yml,file:/app/config/application-secret.yml" \
              -e SPRING_PROFILES_ACTIVE=prod \
              ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
            
            # 컨테이너 실행 확인
            sleep 5
            sudo docker ps -a
            sudo docker logs bidflow --tail 20 || true
