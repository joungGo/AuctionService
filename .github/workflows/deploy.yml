name: Backend Deploy To AWS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          java-package: 'jdk'
          check-latest: false
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Make gradlew executable
        run: chmod +x backEnd/gradlew

      - name: Build with Gradle
        working-directory: backEnd
        run: ./gradlew clean build

      - name: Login to Docker Hub
        run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"

      - name: Build Docker image
        working-directory: backEnd
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/bidflow:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/bidflow:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # 프로젝트 디렉토리로 이동
            cd /home/ubuntu/bidflow-deploy || mkdir -p /home/ubuntu/bidflow-deploy && cd /home/ubuntu/bidflow-deploy
            
            # Docker Compose 파일 생성/업데이트
            cat > docker-compose.yml << 'EOF'
            ${{ secrets.DOCKER_COMPOSE_YML }}
            EOF
            
            # 환경 변수 파일 생성/업데이트
            cat > .env << 'EOF'
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${{ github.sha }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            EOF
            
            # config 디렉토리 생성 및 application.yml 파일 생성
            mkdir -p config
            echo '${{ secrets.APPLICATION_YML }}' > config/application.yml
            
            # Docker Compose 설치 확인 (없으면 설치)
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose 설치 중..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # 새 이미지 다운로드
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/bidflow:${{ github.sha }}
            
            # Docker Compose로 서비스 배포
            sudo docker-compose down || true
            sudo docker-compose up -d
            
            # 배포 상태 확인
            echo "⏳ 서비스 시작 대기 중..."
            sleep 30
            
            # 서비스 상태 확인
            if sudo docker-compose ps | grep -q "Up"; then
              echo "✅ 배포 성공!"
              sudo docker-compose ps
              echo "📋 bidflow 서비스 로그:"
              sudo docker-compose logs bidflow --tail 10
            else
              echo "❌ 배포 실패!"
              sudo docker-compose ps
              sudo docker-compose logs
              exit 1
            fi
            
            # 이전 이미지 정리
            sudo docker image prune -f
