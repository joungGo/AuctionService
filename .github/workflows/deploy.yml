name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  APPLICATION_YML: ${{ secrets.APPLICATION_YML }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Grant execute permission for gradlew
      run: |
        cd backEnd
        chmod +x ./gradlew
      
    - name: Build with Gradle
      run: |
        cd backEnd
        ./gradlew build
      
    - name: Build Docker image
      run: |
        cd backEnd
        docker build -t ${{ secrets.DOCKER_USERNAME }}/bidflow:latest .
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Push to Docker Hub
      run: |
        cd backEnd
        docker push ${{ secrets.DOCKER_USERNAME }}/bidflow:latest
        
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v0.1.5
      env:
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: MYSQL_PASSWORD,REDIS_PASSWORD,DOCKER_USERNAME
        command_timeout: 10m
        script: |
          cd $HOME
          
          # Create bidflow directory if not exists
          mkdir -p bidflow
          cd bidflow
          
          # Set environment variables
          export MYSQL_PASSWORD="$MYSQL_PASSWORD"
          export REDIS_PASSWORD="$REDIS_PASSWORD"
          
          echo "Environment variables set:"
          echo "MYSQL_PASSWORD: $([ -n "$MYSQL_PASSWORD" ] && echo "SET" || echo "NOT SET")"
          echo "REDIS_PASSWORD: $([ -n "$REDIS_PASSWORD" ] && echo "SET" || echo "NOT SET")"
          
          # Create docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            # MySQL Database
            mysql:
              image: mysql:8.0
              container_name: mysql-server
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
                MYSQL_DATABASE: auctionService
                MYSQL_ROOT_HOST: '%'
              ports:
                - "3307:3306"
              volumes:
                - mysql_data:/var/lib/mysql
              command: >
                --bind-address=0.0.0.0
                --default-authentication-plugin=mysql_native_password
                --character-set-server=utf8mb4
                --collation-server=utf8mb4_unicode_ci
              networks:
                - bidflow-network
              healthcheck:
                test: ["CMD", "sh", "-c", "mysqladmin ping -h localhost -u root -p$$MYSQL_ROOT_PASSWORD"]
                timeout: 20s
                retries: 10
          
            # Redis Cache
            redis:
              image: redis:alpine
              container_name: redis-server
              restart: unless-stopped
              environment:
                - REDIS_PASSWORD=${REDIS_PASSWORD}
              command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--bind", "0.0.0.0"]
              ports:
                - "6383:6379"
              volumes:
                - redis_data:/data
              networks:
                - bidflow-network
              healthcheck:
                test: ["CMD", "sh", "-c", "redis-cli -a $$REDIS_PASSWORD ping || exit 1"]
                timeout: 3s
                retries: 5
          
            # Spring Boot Application
            app:
              image: ${DOCKER_USERNAME}/bidflow:latest
              container_name: bidflow
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=prod
                - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/auctionService?useSSL=false&allowPublicKeyRetrieval=true
                - SPRING_DATASOURCE_USERNAME=root
                - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
                - SPRING_REDIS_HOST=redis
                - SPRING_REDIS_PORT=6379
                - SPRING_REDIS_PASSWORD=${REDIS_PASSWORD}
              depends_on:
                mysql:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              networks:
                - bidflow-network
          
          volumes:
            mysql_data:
              driver: local
            redis_data:
              driver: local
          
          networks:
            bidflow-network:
              driver: bridge
          EOF
          
          # Clean up old containers
          echo "=== Cleaning up existing containers ==="
          docker-compose down -v --remove-orphans 2>/dev/null || echo "No containers to stop"
          docker rm -f mysql-server redis-server bidflow 2>/dev/null || echo "No conflicting containers"
          
          # Pull latest image
          echo "=== Pulling latest image from Docker Hub ==="
          docker pull $DOCKER_USERNAME/bidflow:latest
          
          # Start services
          echo "=== Starting all services ==="
          docker-compose up -d
          
          # Wait for health checks
          echo "=== Waiting for services to be healthy ==="
          for i in {1..60}; do
            if docker-compose ps | grep -q "healthy"; then
              echo "✅ Services are starting up... ($i/60)"
              if [ $(docker-compose ps | grep "healthy" | wc -l) -eq 2 ]; then
                echo "✅ All services are healthy!"
                break
              fi
            else
              echo "⏳ Waiting for health checks... ($i/60)"
            fi
            sleep 5
          done
          
          # Final status
          echo "=== Final Status ==="
          docker-compose ps
          
          echo "=== Quick Health Check ==="
          docker exec bidflow curl -f http://localhost:8080/actuator/health 2>/dev/null && echo "✅ App is healthy" || echo "⏳ App still starting"
          
          echo "=== Deployment Complete ===" 
